import sqlite3

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.config import DB_TASK_DIRECTORY, TIMEOUT_DELAY, DB_DIRECTORY, DB_MAIN_ACCOUNTS_DIRECTORY, \
    DB_MULTI_ACCOUNTS_DIRECTORY, DB_PATTERNS_DIRECTORY, DB_LINKS_DIRECTORY, DB_IMAGES_DIRECTORY


async def get_count(db_path: str, table_name: str) -> int:
    """–ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""

    with sqlite3.connect(db_path, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        return cursor.fetchone()[0]

async def create_keyboard(buttons) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    inline_keyboard = []

    for row in buttons:
        inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=data) for text, data in row])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

async def tasks_list() -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""

    with sqlite3.connect(DB_TASK_DIRECTORY, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT task_name FROM Tasks")
        tasks = cursor.fetchall()

    buttons = [[(task[0], f'self-task-{task[0]}')] for task in tasks]

    buttons += [
        [('üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'task-create')],
        [('üìÉ –®–∞–±–ª–æ–Ω—ã', 'patterns-list'), ('üîê –ê–∫–∫–∞—É–Ω—Ç—ã', 'accounts-type')],
        [('üîó –°—Å—ã–ª–∫–∏', 'links-list'), ('üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'images-list')],
        [('üìñ –ü–æ—Å—Ç–∏–Ω–≥ –∏–∑ –ë–î', 'posting-articles-db'), ('üñ• –ü–æ—Å—Ç–∏–Ω–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞', 'posting-articles-server')],
        [('‚ôªÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π', 'articles-editor'), ('‚ùî –¢–µ—Å—Ç –ø—Ä–æ–º—Ç–∞', 'test-prompt')],
        [('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', 'none')],
        [('üóù API-–∫–ª—é—á', 'openai-key'), ('üì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'options-connected-server')],
        [('ü§ñ –ú–æ–¥–µ–ª–∏', 'openai-models'), ('üñº –ü—Ä–æ–º—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', 'prompt-image')],
        [('‚è≥ –¢–∞–π–º–∞—É—Ç —Ü–∏–∫–ª–∞', 'timeout-cycle'), ('‚è≥ –¢–∞–π–º–∞—É—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', 'timeout-publishing')],
        [('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞', 'options-posting'), ('üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑', 'count-words')],
        [('‚õìÔ∏è URLs', 'xlsx-urls'), ('üîç –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è', 'options-links-indexing')],
        [('üîÄ –ê–≤—Ç–æ–ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞', 'options-auto-links')],
    ]

    return await create_keyboard(buttons)

async def patterns_list() -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤"""

    with sqlite3.connect(DB_PATTERNS_DIRECTORY, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT id, pattern_name, pattern FROM Patterns")
        patterns = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for pattern_id, pattern_name, pattern in patterns:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=pattern_name, callback_data=f'self-pattern-{pattern_id}')])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω', callback_data=f'create-pattern')])
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text='üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', callback_data='all-create-patterns')])

        if patterns:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text='üóÉ –í—ã–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤', callback_data='download-patterns')])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data=f'back-to-tasks')])

    return keyboard

async def images_list() -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    with sqlite3.connect(DB_IMAGES_DIRECTORY, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT id, image_name, image_path FROM Images")
        images = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for image_id, image_name, image_path in images:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=image_name, callback_data=f'self-image-{image_id}')])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', callback_data=f'create-images')])

        if images:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text='üóÉ –í—ã–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', callback_data='download-images')])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data=f'back-to-tasks')])

    return keyboard

async def links_list() -> InlineKeyboardMarkup:
    """–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"""

    with sqlite3.connect(DB_LINKS_DIRECTORY, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT link_name, id FROM Links")
        links = cursor.fetchall()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for link_name, link_id in links:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=link_name, callback_data=f'self-links-{link_id}')]
            )

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data='create-link')])
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text='üì¶ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞', callback_data='all-create-links')])

        if links:
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text='üóÉ –í—ã–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫', callback_data='download-links')])

        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", callback_data='back-to-tasks')])

    return keyboard

async def task_prompts(task_name: str) -> tuple:
    """–ü—Ä–æ–º—Ç—ã –∑–∞–¥–∞–Ω–∏—è"""

    connection = sqlite3.connect(DB_DIRECTORY + task_name + '.db', timeout=TIMEOUT_DELAY)
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM Prompts")
    prompts_count = cursor.fetchone()[0]
    connection.close()

    with sqlite3.connect(DB_TASK_DIRECTORY, timeout=TIMEOUT_DELAY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT priority_prompts, theme_count FROM Tasks WHERE task_name = ?", (task_name,))
        priority_prompts, theme_count = cursor.fetchone()

    if prompts_count == 0:
        text = f"–ü—Ä–æ–º—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π", callback_data=f'upload-xlsx-{task_name}')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data=f'self-task-{task_name}')]
        ])
    else:
        text = (f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–µ–º:</b> {theme_count}\n"
                f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–º—Ç–æ–≤:</b> {prompts_count}\n"
                f"<b>–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤:</b> {priority_prompts}")

        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜô –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f'priority-prompts-{task_name}')],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'prompts-edit-{task_name}')],
            [InlineKeyboardButton(text="üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f'all-prompts-edit-{task_name}')],
            [InlineKeyboardButton(text="üóÉ –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤", callback_data=f'download-prompts-{task_name}')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data=f'self-task-{task_name}')]
        ])
    return text, buttons

async def task_articles(task_name: str) -> tuple:
    """–ì–æ—Ç–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–¥–∞–Ω–∏—è"""

    connection = sqlite3.connect(DB_DIRECTORY + task_name + '.db', timeout=TIMEOUT_DELAY)
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM Articles")
    articles_count = cursor.fetchone()[0]
    connection.close()

    if articles_count == 0:
        text = f"–°—Ç–∞—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data=f'self-task-{task_name}')]
        ])
    else:
        text = f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π:</b> {articles_count}\n"

        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'articles-edit-{task_name}')],
            [InlineKeyboardButton(text="üóÉ –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π", callback_data=f'download-articles-{task_name}')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", callback_data=f'self-task-{task_name}')]
        ])

    return text, buttons

async def task_panel_keyboard(task_name: str, task_type: str, action: InlineKeyboardButton) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞–Ω–∏—è"""

    if task_type == '–û—Å–Ω–æ–≤–Ω–æ–π':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úâÔ∏è –ü—Ä–æ–º—Ç—ã', callback_data=f'prompts-list-{task_name}'),
             InlineKeyboardButton(text='üìî –°—Ç–∞—Ç—å–∏', callback_data=f'articles-list-{task_name}')],
            [InlineKeyboardButton(text='üóÑ –ü–æ—Å—Ç–∏–Ω–≥', callback_data=f'posting-many-func-{task_name}'),
             InlineKeyboardButton(text='üóÇ –í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞', callback_data=f'log-{task_name}')],
            [action, InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'update-status-{task_name}')],
            [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞:', callback_data='none')],
            [InlineKeyboardButton(text='ü§ñ –ú–æ–¥–µ–ª–∏ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'task-models-{task_name}'),
             InlineKeyboardButton(text='üîç –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è', callback_data=f'task-indexing-{task_name}')],
            [InlineKeyboardButton(text='‚è≥ –¢–∞–π–º–∞—É—Ç —Ü–∏–∫–ª–∞', callback_data=f'task-timeout-cycle-{task_name}'),
             InlineKeyboardButton(text='‚è≥ –¢–∞–π–º–∞—É—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', callback_data=f'task-timeout-publishing-{task_name}')],
            [InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞', callback_data=f'task-options-posting-{task_name}'),
            InlineKeyboardButton(text='üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑', callback_data=f'task-count-words-{task_name}')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º', callback_data=f'back-to-tasks'),
             InlineKeyboardButton(text='üóë', callback_data=f'task-delete-{task_name}')],
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úâÔ∏è –ü—Ä–æ–º—Ç—ã', callback_data=f'prompts-list-{task_name}'),
             InlineKeyboardButton(text='üìî –°—Ç–∞—Ç—å–∏', callback_data=f'articles-list-{task_name}')],
            [InlineKeyboardButton(text='üóÇ –í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞', callback_data=f'log-{task_name}')],
            [action, InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'update-status-{task_name}')],
            [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞:', callback_data='none')],
            [InlineKeyboardButton(text='üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤', callback_data=f'count-posts-{task_name}'),
             InlineKeyboardButton(text='‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞', callback_data=f'delay-{task_name}')],
            [InlineKeyboardButton(text='ü§ñ –ú–æ–¥–µ–ª–∏ –∑–∞–¥–∞–Ω–∏—è', callback_data=f'task-models-{task_name}')],
            [InlineKeyboardButton(text='üîç –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è', callback_data=f'task-indexing-{task_name}'),
             InlineKeyboardButton(text='üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑', callback_data=f'task-count-words-{task_name}')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º', callback_data=f'back-to-tasks'),
             InlineKeyboardButton(text='üóë', callback_data=f'task-delete-{task_name}')],
        ])

    return keyboard

async def get_accounts(task_type: str) -> tuple:
    """–ê–∫–∫–∞—É–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""

    db_path = DB_MAIN_ACCOUNTS_DIRECTORY if task_type == '–û—Å–Ω–æ–≤–Ω–æ–π' else DB_MULTI_ACCOUNTS_DIRECTORY
    accounts_count = await get_count(db_path, "Accounts")

    if accounts_count == 0:
        return (
            "–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.",
            await create_keyboard([
                [("üìã –î–æ–±–∞–≤–∏—Ç—å", f'add-accounts-{task_type}')],
                [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", 'back-to-tasks')]
            ])
        )

    keyboard_buttons = [
        [("üìã –î–æ–±–∞–≤–∏—Ç—å", f'add-accounts-{task_type}'), ("üóë –£–¥–∞–ª–∏—Ç—å", f'accounts-del-{task_type}')],
        [("üóÉ –í—ã–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", f'download-accounts-{task_type}')],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º", 'back-to-tasks')]
    ]

    if task_type == '–û—Å–Ω–æ–≤–Ω–æ–π':
        keyboard_buttons.insert(2, [("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", f'edit-accounts-{task_type}')])

    return f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> {accounts_count}", await create_keyboard(keyboard_buttons)

def get_accounts_from_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    with sqlite3.connect(DB_MAIN_ACCOUNTS_DIRECTORY) as connection:
        cursor = connection.cursor()
        cursor.execute("SELECT id, account_url, account_login FROM Accounts")

        return cursor.fetchall()

def generate_pagination_keyboard(accounts, page: int, type_selected: str):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""

    ITEMS_PER_PAGE = 10

    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    buttons = [
        [InlineKeyboardButton(text=f"{"vc" if "vc" in platform.lower() else "dtf"}-{login}", callback_data=f"{type_selected}:{idx}")]
        for idx, (_, platform, login) in enumerate(accounts[start_idx:end_idx], start=start_idx)
    ]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if end_idx < len(accounts):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"page:{page + 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)
